var _user$project$Overdrive$printMomentum = function (m) {
	return (!_elm_lang$core$Native_Utils.eq(m.element, '')) ? ((!_elm_lang$core$Native_Utils.eq(m.strength, 0)) ? A2(
		_elm_lang$core$Basics_ops['++'],
		m.element,
		A2(
			_elm_lang$core$Basics_ops['++'],
			' +',
			_elm_lang$core$Basics$toString(m.strength))) : m.element) : '';
};
var _user$project$Overdrive$statusToString = function (status) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		status.duration,
		A2(
			_elm_lang$core$Basics_ops['++'],
			' ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				status.status,
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Native_Utils.eq(status.level, 1) ? 'I' : 'II',
						_elm_lang$core$Native_Utils.eq(status.meta, '') ? '' : A2(_elm_lang$core$Basics_ops['++'], ': ', status.meta))))));
};
var _user$project$Overdrive$renderStatus = function (status) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				_user$project$Overdrive$statusToString(status)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Overdrive$renderStatuses = function (actor) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, _user$project$Overdrive$renderStatus, actor.status));
};
var _user$project$Overdrive$statDiv = F2(
	function (c, m) {
		return _elm_lang$core$Basics$toString(
			_elm_lang$core$Basics$round(
				(_elm_lang$core$Basics$toFloat(c) / _elm_lang$core$Basics$toFloat(m)) * 100));
	});
var _user$project$Overdrive$lobbySocket = 'ws://gaius.ddns.net:4000/socket/websocket';
var _user$project$Overdrive$statusEncoder = function (status) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'status',
				_1: _elm_lang$core$Json_Encode$string(status.status)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'duration',
					_1: _elm_lang$core$Json_Encode$string(status.duration)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'level',
						_1: _elm_lang$core$Json_Encode$int(status.level)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'meta',
							_1: _elm_lang$core$Json_Encode$string(status.meta)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Overdrive$roundDownToSecond = function (ms) {
	return _elm_lang$core$Basics$toFloat(
		A2(
			F2(
				function (x, y) {
					return x * y;
				}),
			1000,
			_elm_lang$core$Basics$truncate(ms / 1000)));
};
var _user$project$Overdrive$Momentum = F2(
	function (a, b) {
		return {element: a, strength: b};
	});
var _user$project$Overdrive$MomentumWithActor = F2(
	function (a, b) {
		return {momentum: a, actor: b};
	});
var _user$project$Overdrive$momentumDecoder = A4(
	_elm_lang$core$Json_Decode$map3,
	F3(
		function (element, strength, actor) {
			return A2(
				_user$project$Overdrive$MomentumWithActor,
				A2(_user$project$Overdrive$Momentum, element, strength),
				actor);
		}),
	A2(_elm_lang$core$Json_Decode$field, 'element', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'strength', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode$field, 'actor', _elm_lang$core$Json_Decode$string));
var _user$project$Overdrive$momentaDecoder = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'momenta',
		_1: {ctor: '[]'}
	},
	_elm_lang$core$Json_Decode$list(_user$project$Overdrive$momentumDecoder));
var _user$project$Overdrive$InitRecord = F2(
	function (a, b) {
		return {name: a, idx: b};
	});
var _user$project$Overdrive$initDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'idx',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'name',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Overdrive$InitRecord)));
var _user$project$Overdrive$initsDecoder = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'inits',
		_1: {ctor: '[]'}
	},
	_elm_lang$core$Json_Decode$list(_user$project$Overdrive$initDecoder));
var _user$project$Overdrive$Actor = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {uuid: a, name: b, currentHP: c, maxHP: d, currentMP: e, maxMP: f, currentLP: g, maxLP: h, currentDrive: i, maxDrive: j, initBase: k, row: l, status: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Overdrive$Status = F4(
	function (a, b, c, d) {
		return {status: a, duration: b, level: c, meta: d};
	});
var _user$project$Overdrive$statusDecoder = A5(
	_elm_lang$core$Json_Decode$map4,
	F4(
		function (status, duration, level, meta) {
			return A4(_user$project$Overdrive$Status, status, duration, level, meta);
		}),
	A2(_elm_lang$core$Json_Decode$field, 'status', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'duration', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'level', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'meta', _elm_lang$core$Json_Decode$string));
var _user$project$Overdrive$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return {momenta: a, enemyMomenta: b, selectedMomentum: c, selectedEnemyMomentum: d, enemies: e, players: f, selectedActorIdx: g, selectedActor: h, selectedStatus: i, inits: j, connectionStatus: k, currentTime: l, mdl: m, raised: n};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Overdrive$ActorsListContainer = F2(
	function (a, b) {
		return {players: a, enemies: b};
	});
var _user$project$Overdrive$Back = {ctor: 'Back'};
var _user$project$Overdrive$Front = {ctor: 'Front'};
var _user$project$Overdrive$rowDecoder = A2(
	_elm_lang$core$Json_Decode$map,
	function (row) {
		return _elm_lang$core$Native_Utils.eq(row, 'Front') ? _user$project$Overdrive$Front : _user$project$Overdrive$Back;
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$Overdrive$actorDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'statuses',
	_elm_lang$core$Json_Decode$list(_user$project$Overdrive$statusDecoder),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'row',
		_user$project$Overdrive$rowDecoder,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'initBase',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'maxDrive',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'currDrive',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'maxLP',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'currLP',
							_elm_lang$core$Json_Decode$int,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'maxMP',
								_elm_lang$core$Json_Decode$int,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'currMP',
									_elm_lang$core$Json_Decode$int,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'maxHP',
										_elm_lang$core$Json_Decode$int,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'currHP',
											_elm_lang$core$Json_Decode$int,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'name',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'uuid',
													_elm_lang$core$Json_Decode$string,
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Overdrive$Actor))))))))))))));
var _user$project$Overdrive$actorListDecoder = _elm_lang$core$Json_Decode$list(_user$project$Overdrive$actorDecoder);
var _user$project$Overdrive$actorsDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	F2(
		function (players, enemies) {
			return A2(_user$project$Overdrive$ActorsListContainer, players, enemies);
		}),
	A2(_elm_lang$core$Json_Decode$field, 'players', _user$project$Overdrive$actorListDecoder),
	A2(_elm_lang$core$Json_Decode$field, 'enemies', _user$project$Overdrive$actorListDecoder));
var _user$project$Overdrive$ScheduledReconnect = function (a) {
	return {ctor: 'ScheduledReconnect', _0: a};
};
var _user$project$Overdrive$Disconnected = {ctor: 'Disconnected'};
var _user$project$Overdrive$init = {
	momenta: {ctor: '[]'},
	enemyMomenta: {ctor: '[]'},
	selectedMomentum: A2(_user$project$Overdrive$Momentum, '', 0),
	selectedEnemyMomentum: A2(_user$project$Overdrive$Momentum, '', 0),
	players: {ctor: '[]'},
	enemies: {ctor: '[]'},
	selectedActorIdx: -1,
	selectedActor: _user$project$Overdrive$Actor('.')('Error')(0)(0)(0)(0)(0)(0)(0)(0)(0)(_user$project$Overdrive$Back)(
		{ctor: '[]'}),
	selectedStatus: A4(_user$project$Overdrive$Status, '', '', 0, ''),
	inits: {ctor: '[]'},
	connectionStatus: _user$project$Overdrive$Disconnected,
	currentTime: 0,
	mdl: _debois$elm_mdl$Material$model,
	raised: -1
};
var _user$project$Overdrive$Connected = {ctor: 'Connected'};
var _user$project$Overdrive$Enemy = {ctor: 'Enemy'};
var _user$project$Overdrive$Player = {ctor: 'Player'};
var _user$project$Overdrive$renderStat = F6(
	function (model, label, currentStat, maxStat, actortype, rorl) {
		var span_class = A2(_elm_lang$core$Basics_ops['++'], 'render-stat-', rorl);
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(span_class),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.eq(actortype, _user$project$Overdrive$Player) ? _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						label,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'   ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(currentStat),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'/',
									_elm_lang$core$Basics$toString(maxStat)))))) : _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						label,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'   ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$Overdrive$statDiv, currentStat, maxStat),
								'%')))),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Overdrive$ConnectionStatusChanged = function (a) {
	return {ctor: 'ConnectionStatusChanged', _0: a};
};
var _user$project$Overdrive$SocketClosedAbnormally = function (a) {
	return {ctor: 'SocketClosedAbnormally', _0: a};
};
var _user$project$Overdrive$socket = A2(
	_saschatimme$elm_phoenix$Phoenix_Socket$reconnectTimer,
	function (backoffIteration) {
		return _elm_lang$core$Basics$toFloat((backoffIteration + 1) * 5000);
	},
	A2(
		_saschatimme$elm_phoenix$Phoenix_Socket$onAbnormalClose,
		_user$project$Overdrive$SocketClosedAbnormally,
		A2(
			_saschatimme$elm_phoenix$Phoenix_Socket$onClose,
			function (_p0) {
				return _user$project$Overdrive$ConnectionStatusChanged(_user$project$Overdrive$Disconnected);
			},
			A2(
				_saschatimme$elm_phoenix$Phoenix_Socket$onOpen,
				_user$project$Overdrive$ConnectionStatusChanged(_user$project$Overdrive$Connected),
				_saschatimme$elm_phoenix$Phoenix_Socket$init(_user$project$Overdrive$lobbySocket)))));
var _user$project$Overdrive$InitRecordsUpdate = function (a) {
	return {ctor: 'InitRecordsUpdate', _0: a};
};
var _user$project$Overdrive$ActorsUpdate = function (a) {
	return {ctor: 'ActorsUpdate', _0: a};
};
var _user$project$Overdrive$MomentumUpdate = function (a) {
	return {ctor: 'MomentumUpdate', _0: a};
};
var _user$project$Overdrive$lobby = function (userName) {
	return _saschatimme$elm_phoenix$Phoenix_Channel$withDebug(
		A3(
			_saschatimme$elm_phoenix$Phoenix_Channel$on,
			'inits_update',
			function (msg) {
				return _user$project$Overdrive$InitRecordsUpdate(msg);
			},
			A3(
				_saschatimme$elm_phoenix$Phoenix_Channel$on,
				'status_update',
				function (msg) {
					return _user$project$Overdrive$ActorsUpdate(msg);
				},
				A3(
					_saschatimme$elm_phoenix$Phoenix_Channel$on,
					'momentum_update',
					function (msg) {
						return _user$project$Overdrive$MomentumUpdate(msg);
					},
					A2(
						_saschatimme$elm_phoenix$Phoenix_Channel$withPayload,
						_elm_lang$core$Json_Encode$object(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'user_name',
									_1: _elm_lang$core$Json_Encode$string('foobie')
								},
								_1: {ctor: '[]'}
							}),
						_saschatimme$elm_phoenix$Phoenix_Channel$init('room:lobby'))))));
};
var _user$project$Overdrive$phoenixSubscription = function (model) {
	return A2(
		_saschatimme$elm_phoenix$Phoenix$connect,
		_user$project$Overdrive$socket,
		{
			ctor: '::',
			_0: _user$project$Overdrive$lobby('foobie'),
			_1: {ctor: '[]'}
		});
};
var _user$project$Overdrive$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Overdrive$Raise = function (a) {
	return {ctor: 'Raise', _0: a};
};
var _user$project$Overdrive$dynamic = F3(
	function (k, action, model) {
		return _debois$elm_mdl$Material_Options$many(
			{
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.eq(model.raised, k) ? _debois$elm_mdl$Material_Elevation$e8 : _debois$elm_mdl$Material_Elevation$e2,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Elevation$transition(250),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$onMouseEnter(
							_user$project$Overdrive$Raise(k)),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onMouseLeave(
								_user$project$Overdrive$Raise(-1)),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$onClick(action),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _user$project$Overdrive$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Overdrive$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'AddMomentum':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'element',
								_1: _elm_lang$core$Json_Encode$string(model.selectedMomentum.element)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'strength',
									_1: _elm_lang$core$Json_Encode$float(model.selectedMomentum.strength)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'actor',
										_1: _elm_lang$core$Json_Encode$string('player')
									},
									_1: {ctor: '[]'}
								}
							}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'new_momentum'));
				return _elm_lang$core$Native_Utils.eq(model.selectedMomentum.element, '') ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedMomentum: A2(_user$project$Overdrive$Momentum, '', 0)
						}),
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'AddEnemyMomentum':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'element',
								_1: _elm_lang$core$Json_Encode$string(model.selectedEnemyMomentum.element)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'strength',
									_1: _elm_lang$core$Json_Encode$float(model.selectedEnemyMomentum.strength)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'actor',
										_1: _elm_lang$core$Json_Encode$string('enemy')
									},
									_1: {ctor: '[]'}
								}
							}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'new_momentum'));
				return _elm_lang$core$Native_Utils.eq(model.selectedEnemyMomentum.element, '') ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedEnemyMomentum: A2(_user$project$Overdrive$Momentum, '', 0)
						}),
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'RemoveMomentum':
				var _p2 = _p1._0;
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'element',
								_1: _elm_lang$core$Json_Encode$string(_p2.element)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'strength',
									_1: _elm_lang$core$Json_Encode$float(_p2.strength)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'actor',
										_1: _elm_lang$core$Json_Encode$string('player')
									},
									_1: {ctor: '[]'}
								}
							}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'remove_momentum'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'RemoveEnemyMomentum':
				var _p3 = _p1._0;
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'element',
								_1: _elm_lang$core$Json_Encode$string(_p3.element)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'strength',
									_1: _elm_lang$core$Json_Encode$float(_p3.strength)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'actor',
										_1: _elm_lang$core$Json_Encode$string('enemy')
									},
									_1: {ctor: '[]'}
								}
							}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'remove_momentum'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'ClearMomentum':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$null,
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'clear_momentum'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'SetMomentumType':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedMomentum: A2(_user$project$Overdrive$Momentum, _p1._0, model.selectedMomentum.strength)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetMomentumStrength':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedMomentum: A2(_user$project$Overdrive$Momentum, model.selectedMomentum.element, _p1._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetEnemyMomentumType':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedEnemyMomentum: A2(_user$project$Overdrive$Momentum, _p1._0, model.selectedEnemyMomentum.strength)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetEnemyMomentumStrength':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedEnemyMomentum: A2(_user$project$Overdrive$Momentum, model.selectedEnemyMomentum.element, _p1._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AddActor':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'team',
								_1: _elm_lang$core$Json_Encode$string(
									_elm_lang$core$Native_Utils.eq(_p1._0, _user$project$Overdrive$Player) ? 'player' : 'enemy')
							},
							_1: {ctor: '[]'}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'add_actor'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'RemoveActor':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'uuid',
								_1: _elm_lang$core$Json_Encode$string(model.selectedActor.uuid)
							},
							_1: {ctor: '[]'}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'remove_actor'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedActorIdx: -1,
							selectedActor: _user$project$Overdrive$Actor('.')('Error')(0)(0)(0)(0)(0)(0)(0)(0)(0)(_user$project$Overdrive$Back)(
								{ctor: '[]'})
						}),
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'ChangeSelectedActorName':
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{name: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeSelectedActorMaxHP':
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{maxHP: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeSelectedActorCurrentHP':
				var _p4 = _p1._0;
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{
						currentHP: (_elm_lang$core$Native_Utils.cmp(_p4, model.selectedActor.maxHP) < 1) ? _p4 : model.selectedActor.maxHP
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeSelectedActorMaxMP':
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{maxMP: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeSelectedActorCurrentMP':
				var _p5 = _p1._0;
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{
						currentMP: (_elm_lang$core$Native_Utils.cmp(_p5, model.selectedActor.maxMP) < 1) ? _p5 : model.selectedActor.maxMP
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeSelectedActorMaxLP':
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{maxLP: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeSelectedActorCurrentLP':
				var _p6 = _p1._0;
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{
						currentLP: (_elm_lang$core$Native_Utils.cmp(_p6, model.selectedActor.maxLP) < 1) ? _p6 : model.selectedActor.maxLP
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeSelectedActorMaxDrive':
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{maxDrive: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeSelectedActorCurrentDrive':
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{currentDrive: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeSelectedActorBaseInit':
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{initBase: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleSelectedActorRow':
				var oldSelectedActor = model.selectedActor;
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{
						row: _elm_lang$core$Native_Utils.eq(oldSelectedActor.row, _user$project$Overdrive$Front) ? _user$project$Overdrive$Back : _user$project$Overdrive$Front
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RemoveSelectedModelStatus':
				var oldSelectedActor = model.selectedActor;
				var newStatusList = A2(
					_elm_lang$core$List$filter,
					function (s) {
						return !_elm_lang$core$Native_Utils.eq(s, _p1._0);
					},
					model.selectedActor.status);
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{status: newStatusList});
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{selectedActor: newSelectedActor}),
					{ctor: '[]'});
			case 'AddSelectedModelStatus':
				var oldSelectedActor = model.selectedActor;
				var status = model.selectedStatus;
				var valid = (!_elm_lang$core$Native_Utils.eq(status.status, '')) && ((!_elm_lang$core$Native_Utils.eq(status.duration, '')) && (_elm_lang$core$Native_Utils.cmp(status.level, 0) > 0));
				var newStatusList = A2(
					_elm_lang$core$Basics_ops['++'],
					model.selectedActor.status,
					{
						ctor: '::',
						_0: A4(_user$project$Overdrive$Status, status.status, status.duration, status.level, status.meta),
						_1: {ctor: '[]'}
					});
				var newSelectedActor = _elm_lang$core$Native_Utils.update(
					oldSelectedActor,
					{status: newStatusList});
				return valid ? A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedActor: newSelectedActor,
							selectedStatus: A4(_user$project$Overdrive$Status, '', '', 0, '')
						}),
					{ctor: '[]'}) : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ChangeSelectedStatusName':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedStatus: A4(_user$project$Overdrive$Status, _p1._0, model.selectedStatus.duration, model.selectedStatus.level, model.selectedStatus.meta)
						}),
					{ctor: '[]'});
			case 'ChangeSelectedStatusDuration':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedStatus: A4(_user$project$Overdrive$Status, model.selectedStatus.status, _p1._0, model.selectedStatus.level, model.selectedStatus.meta)
						}),
					{ctor: '[]'});
			case 'ChangeSelectedStatusLevel':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedStatus: A4(_user$project$Overdrive$Status, model.selectedStatus.status, model.selectedStatus.duration, _p1._0, model.selectedStatus.meta)
						}),
					{ctor: '[]'});
			case 'ChangeSelectedStatusMeta':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedStatus: A4(_user$project$Overdrive$Status, model.selectedStatus.status, model.selectedStatus.duration, model.selectedStatus.level, _p1._0)
						}),
					{ctor: '[]'});
			case 'SelectActor':
				var _p8 = _p1._0;
				var selectedActorActualIndex = (_elm_lang$core$Native_Utils.cmp(_p8, 100) < 0) ? _p8 : (_p8 - 100);
				var selectedActorArray = (_elm_lang$core$Native_Utils.cmp(_p8, 100) < 0) ? _elm_lang$core$Array$fromList(model.players) : _elm_lang$core$Array$fromList(model.enemies);
				var maybeActor = A2(_elm_lang$core$Array$get, selectedActorActualIndex, selectedActorArray);
				var _p7 = maybeActor;
				if (_p7.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{selectedActorIdx: _p8, selectedActor: _p7._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								selectedActorIdx: -1,
								selectedActor: _user$project$Overdrive$Actor('.')('Error')(0)(0)(0)(0)(0)(0)(0)(0)(0)(_user$project$Overdrive$Back)(
									{ctor: '[]'})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'SaveActorChanges':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'uuid',
								_1: _elm_lang$core$Json_Encode$string(model.selectedActor.uuid)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'name',
									_1: _elm_lang$core$Json_Encode$string(model.selectedActor.name)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'team',
										_1: (_elm_lang$core$Native_Utils.cmp(model.selectedActorIdx, 100) < 0) ? _elm_lang$core$Json_Encode$string('player') : _elm_lang$core$Json_Encode$string('enemy')
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'currHP',
											_1: _elm_lang$core$Json_Encode$int(model.selectedActor.currentHP)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'maxHP',
												_1: _elm_lang$core$Json_Encode$int(model.selectedActor.maxHP)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'currMP',
													_1: _elm_lang$core$Json_Encode$int(model.selectedActor.currentMP)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'maxMP',
														_1: _elm_lang$core$Json_Encode$int(model.selectedActor.maxMP)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'currLP',
															_1: _elm_lang$core$Json_Encode$int(model.selectedActor.currentLP)
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'maxLP',
																_1: _elm_lang$core$Json_Encode$int(model.selectedActor.maxLP)
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'currDrive',
																	_1: _elm_lang$core$Json_Encode$int(model.selectedActor.currentDrive)
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'maxDrive',
																		_1: _elm_lang$core$Json_Encode$int(model.selectedActor.maxDrive)
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: 'initBase',
																			_1: _elm_lang$core$Json_Encode$int(model.selectedActor.initBase)
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: 'row',
																				_1: _elm_lang$core$Native_Utils.eq(model.selectedActor.row, _user$project$Overdrive$Front) ? _elm_lang$core$Json_Encode$string('Front') : _elm_lang$core$Json_Encode$string('Back')
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '_Tuple2',
																					_0: 'statuses',
																					_1: _elm_lang$core$Json_Encode$list(
																						A2(_elm_lang$core$List$map, _user$project$Overdrive$statusEncoder, model.selectedActor.status))
																				},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'save_actor'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedActorIdx: -1,
							selectedActor: _user$project$Overdrive$Actor('.')('Error')(0)(0)(0)(0)(0)(0)(0)(0)(0)(_user$project$Overdrive$Back)(
								{ctor: '[]'})
						}),
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'ClearActorChanges':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedActorIdx: -1,
							selectedActor: _user$project$Overdrive$Actor('.')('Error')(0)(0)(0)(0)(0)(0)(0)(0)(0)(_user$project$Overdrive$Back)(
								{ctor: '[]'})
						}),
					{ctor: '[]'});
			case 'InitialiseInitRecords':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$null,
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'initialise_init'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'ClearInitRecords':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$null,
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'clear_init'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'IncrementInitRecord':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'idx',
								_1: _elm_lang$core$Json_Encode$int(_p1._0)
							},
							_1: {ctor: '[]'}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'increment_init'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'DecrementInitRecord':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'idx',
								_1: _elm_lang$core$Json_Encode$int(_p1._0)
							},
							_1: {ctor: '[]'}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'decrement_init'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Overdrive$Mdl, _p1._0, model);
			case 'Raise':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{raised: _p1._0}),
					{ctor: '[]'});
			case 'MomentumUpdate':
				var _p12 = _p1._0;
				var _p9 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Overdrive$momentaDecoder, _p12);
				if (_p9.ctor === 'Ok') {
					var _p10 = _p9._0;
					var playerMomenta = A2(
						_elm_lang$core$List$map,
						function (mwa) {
							return mwa.momentum;
						},
						A2(
							_elm_lang$core$List$filter,
							function (mwa) {
								return _elm_lang$core$Native_Utils.eq(mwa.actor, 'player');
							},
							_p10));
					var enemyMomenta = A2(
						_elm_lang$core$List$map,
						function (mwa) {
							return mwa.momentum;
						},
						A2(
							_elm_lang$core$List$filter,
							function (mwa) {
								return _elm_lang$core$Native_Utils.eq(mwa.actor, 'enemy');
							},
							_p10));
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{momenta: playerMomenta, enemyMomenta: enemyMomenta}),
						{ctor: '[]'});
				} else {
					var _p11 = A2(
						_elm_lang$core$Debug$log,
						'momentumUpdate err',
						{ctor: '_Tuple2', _0: _p9._0, _1: _p12});
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'ActorsUpdate':
				var _p16 = _p1._0;
				var _p13 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Overdrive$actorsDecoder, _p16);
				if (_p13.ctor === 'Ok') {
					var _p14 = _p13._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{players: _p14.players, enemies: _p14.enemies}),
						{ctor: '[]'});
				} else {
					var _p15 = A2(
						_elm_lang$core$Debug$log,
						'actorsUpdate err',
						{ctor: '_Tuple2', _0: _p13._0, _1: _p16});
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'InitRecordsUpdate':
				var _p19 = _p1._0;
				var _p17 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Overdrive$initsDecoder, _p19);
				if (_p17.ctor === 'Ok') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{inits: _p17._0}),
						{ctor: '[]'});
				} else {
					var _p18 = A2(
						_elm_lang$core$Debug$log,
						'initsUpdate err',
						{ctor: '_Tuple2', _0: _p17._0, _1: _p19});
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'SocketClosedAbnormally':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							connectionStatus: _user$project$Overdrive$ScheduledReconnect(
								{
									time: _user$project$Overdrive$roundDownToSecond(model.currentTime + _p1._0.reconnectWait)
								})
						}),
					{ctor: '[]'});
			case 'ConnectionStatusChanged':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{connectionStatus: _p1._0}),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{currentTime: _p1._0}),
					{ctor: '[]'});
		}
	});
var _user$project$Overdrive$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Overdrive$phoenixSubscription(model),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Overdrive$Tick),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Menu$subs, _user$project$Overdrive$Mdl, model.mdl),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Overdrive$statTextField = F4(
	function (model, fieldId, value, action) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A5(
					_debois$elm_mdl$Material_Textfield$render,
					_user$project$Overdrive$Mdl,
					{
						ctor: '::',
						_0: model.selectedActorIdx + fieldId,
						_1: {ctor: '[]'}
					},
					model.mdl,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Textfield$value(
							_elm_lang$core$Basics$toString(value)),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Textfield$maxlength(3),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '30px'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onInput(
										function (_p20) {
											return action(
												A2(
													_elm_lang$core$Result$withDefault,
													0,
													_elm_lang$core$String$toInt(_p20)));
										}),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$input(
											{
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'text-align', 'right'),
												_1: {
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '30px'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Overdrive$makeMomentumRadio = F6(
	function (model, instance, momentumLabel, momentum, setMomentumElementFunction, mRadioGroup) {
		return A5(
			_debois$elm_mdl$Material_Toggles$radio,
			_user$project$Overdrive$Mdl,
			{
				ctor: '::',
				_0: instance,
				_1: {ctor: '[]'}
			},
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Toggles$value(
					_elm_lang$core$Native_Utils.eq(momentumLabel, momentum.element)),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Toggles$group(mRadioGroup),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Toggles$ripple,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onToggle(
								setMomentumElementFunction(momentumLabel)),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '3px 3px'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(momentumLabel),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Overdrive$addMomentumInput = F6(
	function (model, momentum, setMomentumStrengthFunction, setMomentumElementFunction, mRadioGroup, idBase) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A6(_user$project$Overdrive$makeMomentumRadio, model, idBase + 2, 'Fire', momentum, setMomentumElementFunction, mRadioGroup),
						_1: {
							ctor: '::',
							_0: A6(_user$project$Overdrive$makeMomentumRadio, model, idBase + 3, 'Water', momentum, setMomentumElementFunction, mRadioGroup),
							_1: {
								ctor: '::',
								_0: A6(_user$project$Overdrive$makeMomentumRadio, model, idBase + 4, 'Earth', momentum, setMomentumElementFunction, mRadioGroup),
								_1: {
									ctor: '::',
									_0: A6(_user$project$Overdrive$makeMomentumRadio, model, idBase + 5, 'Air', momentum, setMomentumElementFunction, mRadioGroup),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A6(_user$project$Overdrive$makeMomentumRadio, model, idBase + 6, 'Launch', momentum, setMomentumElementFunction, mRadioGroup),
							_1: {
								ctor: '::',
								_0: A6(_user$project$Overdrive$makeMomentumRadio, model, idBase + 7, 'Pin', momentum, setMomentumElementFunction, mRadioGroup),
								_1: {
									ctor: '::',
									_0: A6(_user$project$Overdrive$makeMomentumRadio, model, idBase + 8, 'Rush', momentum, setMomentumElementFunction, mRadioGroup),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A6(_user$project$Overdrive$makeMomentumRadio, model, idBase + 9, 'Recovery', momentum, setMomentumElementFunction, mRadioGroup),
								_1: {
									ctor: '::',
									_0: A6(_user$project$Overdrive$makeMomentumRadio, model, idBase + 10, 'Supreme', momentum, setMomentumElementFunction, mRadioGroup),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Slider$view(
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Slider$onChange(setMomentumStrengthFunction),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Slider$value(momentum.strength),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Slider$max(10),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Slider$min(0),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Slider$step(1),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$Overdrive$ClearInitRecords = {ctor: 'ClearInitRecords'};
var _user$project$Overdrive$InitialiseInitRecords = {ctor: 'InitialiseInitRecords'};
var _user$project$Overdrive$DecrementInitRecord = function (a) {
	return {ctor: 'DecrementInitRecord', _0: a};
};
var _user$project$Overdrive$IncrementInitRecord = function (a) {
	return {ctor: 'IncrementInitRecord', _0: a};
};
var _user$project$Overdrive$renderInit = F2(
	function (model, record) {
		var minus = F2(
			function (model, k) {
				return A5(
					_debois$elm_mdl$Material_Button$render,
					_user$project$Overdrive$Mdl,
					{
						ctor: '::',
						_0: k,
						_1: {ctor: '[]'}
					},
					model.mdl,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$icon,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onClick(
								_user$project$Overdrive$DecrementInitRecord(k)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Icon$i('arrow_drop_down'),
						_1: {ctor: '[]'}
					});
			});
		var plus = F2(
			function (model, k) {
				return A5(
					_debois$elm_mdl$Material_Button$render,
					_user$project$Overdrive$Mdl,
					{
						ctor: '::',
						_0: k,
						_1: {ctor: '[]'}
					},
					model.mdl,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$icon,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onClick(
								_user$project$Overdrive$IncrementInitRecord(k)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Icon$i('arrow_drop_up'),
						_1: {ctor: '[]'}
					});
			});
		return A2(
			_debois$elm_mdl$Material_List$li,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(minus, model, record.idx),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_List$content,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(record.name),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(plus, model, record.idx),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Overdrive$renderInitList = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A5(
				_debois$elm_mdl$Material_Button$render,
				_user$project$Overdrive$Mdl,
				{
					ctor: '::',
					_0: 53524,
					_1: {ctor: '[]'}
				},
				model.mdl,
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Button$raised,
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$colored,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Button$ripple,
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '16px'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$InitialiseInitRecords),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('INITIALISE'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A5(
					_debois$elm_mdl$Material_Button$render,
					_user$project$Overdrive$Mdl,
					{
						ctor: '::',
						_0: 53525,
						_1: {ctor: '[]'}
					},
					model.mdl,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$raised,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Button$colored,
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Button$ripple,
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '3px'),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$ClearInitRecords),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('CLEAR'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_List$ul,
						{ctor: '[]'},
						A2(
							_elm_lang$core$List$map,
							_user$project$Overdrive$renderInit(model),
							model.inits)),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Overdrive$ClearActorChanges = {ctor: 'ClearActorChanges'};
var _user$project$Overdrive$SaveActorChanges = {ctor: 'SaveActorChanges'};
var _user$project$Overdrive$SelectActor = function (a) {
	return {ctor: 'SelectActor', _0: a};
};
var _user$project$Overdrive$statusCard = F3(
	function (model, actortype, _p21) {
		var _p22 = _p21;
		var _p23 = _p22._1;
		var dyn_id = _p22._0 + (_elm_lang$core$Native_Utils.eq(actortype, _user$project$Overdrive$Player) ? 0 : 100);
		return A2(
			_debois$elm_mdl$Material_Card$view,
			{
				ctor: '::',
				_0: A3(
					_user$project$Overdrive$dynamic,
					dyn_id,
					_user$project$Overdrive$SelectActor(dyn_id),
					model),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '240px'),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$css,
							'margin',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'4px 8px 4px ',
								((_elm_lang$core$Native_Utils.eq(actortype, _user$project$Overdrive$Player) && _elm_lang$core$Native_Utils.eq(_p23.row, _user$project$Overdrive$Front)) || (_elm_lang$core$Native_Utils.eq(actortype, _user$project$Overdrive$Enemy) && _elm_lang$core$Native_Utils.eq(_p23.row, _user$project$Overdrive$Back))) ? '35px' : '0px')),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Color$background(
								A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Blue, _debois$elm_mdl$Material_Color$S500)),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Card$title,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '5px 8px 0px 8px'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$head,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Color$text(_debois$elm_mdl$Material_Color$white),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(_p23.name),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Card$text,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Color$text(_debois$elm_mdl$Material_Color$white),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '0px 8px 8px 8px'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('render-statcard-block'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('render-statcard-double'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A6(_user$project$Overdrive$renderStat, model, 'HP', _p23.currentHP, _p23.maxHP, actortype, 'left'),
											_1: {
												ctor: '::',
												_0: A6(_user$project$Overdrive$renderStat, model, 'MP', _p23.currentMP, _p23.maxMP, actortype, 'right'),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('render-statcard-double'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A6(_user$project$Overdrive$renderStat, model, 'LP', _p23.currentLP, _p23.maxLP, actortype, 'left'),
												_1: {
													ctor: '::',
													_0: A6(_user$project$Overdrive$renderStat, model, 'Drive', _p23.currentDrive, _p23.maxDrive, actortype, 'right'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _user$project$Overdrive$renderStatuses(_p23),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Overdrive$ChangeSelectedStatusMeta = function (a) {
	return {ctor: 'ChangeSelectedStatusMeta', _0: a};
};
var _user$project$Overdrive$ChangeSelectedStatusLevel = function (a) {
	return {ctor: 'ChangeSelectedStatusLevel', _0: a};
};
var _user$project$Overdrive$ChangeSelectedStatusDuration = function (a) {
	return {ctor: 'ChangeSelectedStatusDuration', _0: a};
};
var _user$project$Overdrive$ChangeSelectedStatusName = function (a) {
	return {ctor: 'ChangeSelectedStatusName', _0: a};
};
var _user$project$Overdrive$changeStatusMenuItem = function (string) {
	return A2(
		_debois$elm_mdl$Material_Menu$item,
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Menu$onSelect(
				_user$project$Overdrive$ChangeSelectedStatusName(string)),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(string),
			_1: {ctor: '[]'}
		});
};
var _user$project$Overdrive$AddSelectedModelStatus = {ctor: 'AddSelectedModelStatus'};
var _user$project$Overdrive$RemoveSelectedModelStatus = function (a) {
	return {ctor: 'RemoveSelectedModelStatus', _0: a};
};
var _user$project$Overdrive$renderEditStatusListItem = F2(
	function (model, status) {
		return A2(
			_debois$elm_mdl$Material_List$li,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_List$content,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_user$project$Overdrive$statusToString(status)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A5(
						_debois$elm_mdl$Material_Button$render,
						_user$project$Overdrive$Mdl,
						{
							ctor: '::',
							_0: 134454526,
							_1: {ctor: '[]'}
						},
						model.mdl,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Button$icon,
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$onClick(
									_user$project$Overdrive$RemoveSelectedModelStatus(status)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Icon$i('delete_forever'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Overdrive$renderEditStatusList = function (model) {
	var printableLevel = (_elm_lang$core$Native_Utils.cmp(model.selectedStatus.level, 0) > 0) ? (_elm_lang$core$Native_Utils.eq(model.selectedStatus.level, 1) ? 'I' : 'II') : '';
	return A2(
		_debois$elm_mdl$Material_List$ul,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$map,
				_user$project$Overdrive$renderEditStatusListItem(model),
				model.selectedActor.status),
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_List$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_List$content,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Menu$render,
									_user$project$Overdrive$Mdl,
									{
										ctor: '::',
										_0: 7854625,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Menu$topRight,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _user$project$Overdrive$changeStatusMenuItem('Energize'),
										_1: {
											ctor: '::',
											_0: _user$project$Overdrive$changeStatusMenuItem('Focus'),
											_1: {
												ctor: '::',
												_0: _user$project$Overdrive$changeStatusMenuItem('Lucky'),
												_1: {
													ctor: '::',
													_0: _user$project$Overdrive$changeStatusMenuItem('Kinetic-Power'),
													_1: {
														ctor: '::',
														_0: _user$project$Overdrive$changeStatusMenuItem('Elemental-Power'),
														_1: {
															ctor: '::',
															_0: _user$project$Overdrive$changeStatusMenuItem('Healing-Power'),
															_1: {
																ctor: '::',
																_0: _user$project$Overdrive$changeStatusMenuItem('Kinetic-Guard'),
																_1: {
																	ctor: '::',
																	_0: _user$project$Overdrive$changeStatusMenuItem('Elemental-Guard'),
																	_1: {
																		ctor: '::',
																		_0: _user$project$Overdrive$changeStatusMenuItem('Stalwart'),
																		_1: {
																			ctor: '::',
																			_0: _user$project$Overdrive$changeStatusMenuItem('Liberation'),
																			_1: {
																				ctor: '::',
																				_0: _user$project$Overdrive$changeStatusMenuItem('Element-Absorb'),
																				_1: {
																					ctor: '::',
																					_0: _user$project$Overdrive$changeStatusMenuItem('Chill'),
																					_1: {
																						ctor: '::',
																						_0: _user$project$Overdrive$changeStatusMenuItem('Exhaust'),
																						_1: {
																							ctor: '::',
																							_0: _user$project$Overdrive$changeStatusMenuItem('Shock'),
																							_1: {
																								ctor: '::',
																								_0: _user$project$Overdrive$changeStatusMenuItem('Curse'),
																								_1: {
																									ctor: '::',
																									_0: _user$project$Overdrive$changeStatusMenuItem('Burning'),
																									_1: {
																										ctor: '::',
																										_0: _user$project$Overdrive$changeStatusMenuItem('Kinetic-Shatter'),
																										_1: {
																											ctor: '::',
																											_0: _user$project$Overdrive$changeStatusMenuItem('Elemental-Shatter'),
																											_1: {
																												ctor: '::',
																												_0: _user$project$Overdrive$changeStatusMenuItem('Kinetic-Falter'),
																												_1: {
																													ctor: '::',
																													_0: _user$project$Overdrive$changeStatusMenuItem('Elemental-Falter'),
																													_1: {
																														ctor: '::',
																														_0: _user$project$Overdrive$changeStatusMenuItem('Toxin'),
																														_1: {
																															ctor: '::',
																															_0: _user$project$Overdrive$changeStatusMenuItem('Taunt'),
																															_1: {
																																ctor: '::',
																																_0: _user$project$Overdrive$changeStatusMenuItem('Challenge'),
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(model.selectedStatus.status),
									_1: {
										ctor: '::',
										_0: A5(
											_debois$elm_mdl$Material_Menu$render,
											_user$project$Overdrive$Mdl,
											{
												ctor: '::',
												_0: 7854626,
												_1: {ctor: '[]'}
											},
											model.mdl,
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_Menu$bottomLeft,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Menu$item,
													{
														ctor: '::',
														_0: _debois$elm_mdl$Material_Menu$onSelect(
															_user$project$Overdrive$ChangeSelectedStatusDuration('Long')),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Long'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Menu$item,
														{
															ctor: '::',
															_0: _debois$elm_mdl$Material_Menu$onSelect(
																_user$project$Overdrive$ChangeSelectedStatusDuration('Short')),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Short'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(model.selectedStatus.duration),
											_1: {
												ctor: '::',
												_0: A5(
													_debois$elm_mdl$Material_Menu$render,
													_user$project$Overdrive$Mdl,
													{
														ctor: '::',
														_0: 7854627,
														_1: {ctor: '[]'}
													},
													model.mdl,
													{
														ctor: '::',
														_0: _debois$elm_mdl$Material_Menu$bottomLeft,
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Menu$item,
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Menu$onSelect(
																	_user$project$Overdrive$ChangeSelectedStatusLevel(1)),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('I'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Menu$item,
																{
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Menu$onSelect(
																		_user$project$Overdrive$ChangeSelectedStatusLevel(2)),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('II'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text(printableLevel),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Button$render,
								_user$project$Overdrive$Mdl,
								{
									ctor: '::',
									_0: -1509782911,
									_1: {ctor: '[]'}
								},
								model.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Button$icon,
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$AddSelectedModelStatus),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Icon$i('library_add'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}));
};
var _user$project$Overdrive$ToggleSelectedActorRow = {ctor: 'ToggleSelectedActorRow'};
var _user$project$Overdrive$ChangeSelectedActorBaseInit = function (a) {
	return {ctor: 'ChangeSelectedActorBaseInit', _0: a};
};
var _user$project$Overdrive$ChangeSelectedActorCurrentDrive = function (a) {
	return {ctor: 'ChangeSelectedActorCurrentDrive', _0: a};
};
var _user$project$Overdrive$ChangeSelectedActorMaxDrive = function (a) {
	return {ctor: 'ChangeSelectedActorMaxDrive', _0: a};
};
var _user$project$Overdrive$ChangeSelectedActorCurrentLP = function (a) {
	return {ctor: 'ChangeSelectedActorCurrentLP', _0: a};
};
var _user$project$Overdrive$ChangeSelectedActorMaxLP = function (a) {
	return {ctor: 'ChangeSelectedActorMaxLP', _0: a};
};
var _user$project$Overdrive$ChangeSelectedActorCurrentMP = function (a) {
	return {ctor: 'ChangeSelectedActorCurrentMP', _0: a};
};
var _user$project$Overdrive$ChangeSelectedActorMaxMP = function (a) {
	return {ctor: 'ChangeSelectedActorMaxMP', _0: a};
};
var _user$project$Overdrive$ChangeSelectedActorCurrentHP = function (a) {
	return {ctor: 'ChangeSelectedActorCurrentHP', _0: a};
};
var _user$project$Overdrive$ChangeSelectedActorMaxHP = function (a) {
	return {ctor: 'ChangeSelectedActorMaxHP', _0: a};
};
var _user$project$Overdrive$ChangeSelectedActorName = function (a) {
	return {ctor: 'ChangeSelectedActorName', _0: a};
};
var _user$project$Overdrive$RemoveActor = {ctor: 'RemoveActor'};
var _user$project$Overdrive$editActor = F2(
	function (model, actortype) {
		var data = {
			ctor: '::',
			_0: {ctor: '_Tuple6', _0: 1, _1: 'HP', _2: model.selectedActor.currentHP, _3: model.selectedActor.maxHP, _4: _user$project$Overdrive$ChangeSelectedActorCurrentHP, _5: _user$project$Overdrive$ChangeSelectedActorMaxHP},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple6', _0: 2, _1: 'MP', _2: model.selectedActor.currentMP, _3: model.selectedActor.maxMP, _4: _user$project$Overdrive$ChangeSelectedActorCurrentMP, _5: _user$project$Overdrive$ChangeSelectedActorMaxMP},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple6', _0: 3, _1: 'LP', _2: model.selectedActor.currentLP, _3: model.selectedActor.maxLP, _4: _user$project$Overdrive$ChangeSelectedActorCurrentLP, _5: _user$project$Overdrive$ChangeSelectedActorMaxLP},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple6', _0: 4, _1: 'Drive', _2: model.selectedActor.currentDrive, _3: model.selectedActor.maxDrive, _4: _user$project$Overdrive$ChangeSelectedActorCurrentDrive, _5: _user$project$Overdrive$ChangeSelectedActorMaxDrive},
						_1: {ctor: '[]'}
					}
				}
			}
		};
		var playerSelected = _elm_lang$core$Native_Utils.cmp(model.selectedActorIdx, 100) < 0;
		var shouldDisplay = ((playerSelected && _elm_lang$core$Native_Utils.eq(actortype, _user$project$Overdrive$Player)) || ((!playerSelected) && _elm_lang$core$Native_Utils.eq(actortype, _user$project$Overdrive$Enemy))) && (!_elm_lang$core$Native_Utils.eq(model.selectedActorIdx, -1));
		return shouldDisplay ? {
			ctor: '::',
			_0: A5(
				_debois$elm_mdl$Material_Button$render,
				_user$project$Overdrive$Mdl,
				{
					ctor: '::',
					_0: 999,
					_1: {ctor: '[]'}
				},
				model.mdl,
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Button$raised,
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$colored,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Button$ripple,
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '12px'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$SaveActorChanges),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('SAVE'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A5(
					_debois$elm_mdl$Material_Button$render,
					_user$project$Overdrive$Mdl,
					{
						ctor: '::',
						_0: 665,
						_1: {ctor: '[]'}
					},
					model.mdl,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$raised,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Button$colored,
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Button$ripple,
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '3px'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$ClearActorChanges),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('RESET'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A5(
						_debois$elm_mdl$Material_Button$render,
						_user$project$Overdrive$Mdl,
						{
							ctor: '::',
							_0: 666,
							_1: {ctor: '[]'}
						},
						model.mdl,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Button$raised,
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Button$colored,
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Button$ripple,
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '3px'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$RemoveActor),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('DELETE'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Textfield$render,
									_user$project$Overdrive$Mdl,
									{
										ctor: '::',
										_0: 800,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Textfield$value(model.selectedActor.name),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onInput(_user$project$Overdrive$ChangeSelectedActorName),
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '255px'),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$input(
														{
															ctor: '::',
															_0: A2(_debois$elm_mdl$Material_Options$css, 'text-align', 'center'),
															_1: {
																ctor: '::',
																_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '255px'),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Table$table,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Table$thead,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Table$tr,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Table$th,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(''),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Table$th,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('CURR'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Table$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('MAX'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Table$th,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('±'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Table$tbody,
											{ctor: '[]'},
											A2(
												_elm_lang$core$List$map,
												function (_p24) {
													var _p25 = _p24;
													var _p26 = _p25._0;
													return A2(
														_debois$elm_mdl$Material_Table$tr,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Table$td,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(_p25._1),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Table$td,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: A4(_user$project$Overdrive$statTextField, model, _p26 * 10, _p25._2, _p25._4),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Table$td,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: A4(_user$project$Overdrive$statTextField, model, _p26 * 100, _p25._3, _p25._5),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$td,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('+'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('-'),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														});
												},
												data)),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Table$tr,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Table$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Init'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Table$td,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A4(_user$project$Overdrive$statTextField, model, 142526, model.selectedActor.initBase, _user$project$Overdrive$ChangeSelectedActorBaseInit),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Table$td,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(''),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Table$td,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('+'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('-'),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Toggles$switch,
									_user$project$Overdrive$Mdl,
									{
										ctor: '::',
										_0: 774,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Overdrive$ToggleSelectedActorRow),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Toggles$ripple,
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Toggles$value(
													_elm_lang$core$Native_Utils.eq(model.selectedActor.row, _user$project$Overdrive$Front) ? true : false),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Native_Utils.eq(model.selectedActor.row, _user$project$Overdrive$Front) ? 'Front' : 'Back'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Overdrive$renderEditStatusList(model),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		} : {
			ctor: '::',
			_0: _elm_lang$html$Html$text(''),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Overdrive$AddActor = function (a) {
	return {ctor: 'AddActor', _0: a};
};
var _user$project$Overdrive$renderStatusList = F2(
	function (model, actortype) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					A2(
						_elm_lang$core$List$map,
						A2(_user$project$Overdrive$statusCard, model, actortype),
						_elm_lang$core$Native_Utils.eq(actortype, _user$project$Overdrive$Player) ? A2(
							_elm_lang$core$List$indexedMap,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							model.players) : A2(
							_elm_lang$core$List$indexedMap,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							model.enemies))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Button$render,
								_user$project$Overdrive$Mdl,
								{
									ctor: '::',
									_0: 998,
									_1: {ctor: '[]'}
								},
								model.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Button$fab,
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Button$colored,
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '92px'),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onClick(
													_user$project$Overdrive$AddActor(actortype)),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Icon$i('add'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							A2(_user$project$Overdrive$editActor, model, actortype)),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Overdrive$SetEnemyMomentumStrength = function (a) {
	return {ctor: 'SetEnemyMomentumStrength', _0: a};
};
var _user$project$Overdrive$SetEnemyMomentumType = function (a) {
	return {ctor: 'SetEnemyMomentumType', _0: a};
};
var _user$project$Overdrive$SetMomentumStrength = function (a) {
	return {ctor: 'SetMomentumStrength', _0: a};
};
var _user$project$Overdrive$SetMomentumType = function (a) {
	return {ctor: 'SetMomentumType', _0: a};
};
var _user$project$Overdrive$ClearMomentum = {ctor: 'ClearMomentum'};
var _user$project$Overdrive$RemoveEnemyMomentum = function (a) {
	return {ctor: 'RemoveEnemyMomentum', _0: a};
};
var _user$project$Overdrive$toEnemyChip = function (momentum) {
	return A2(
		_debois$elm_mdl$Material_Chip$span,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '5px 5px'),
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Chip$deleteIcon('cancel'),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Chip$deleteClick(
						_user$project$Overdrive$RemoveEnemyMomentum(momentum)),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Chip$content,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_user$project$Overdrive$printMomentum(momentum)),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Overdrive$renderEnemyMomenta = function (momenta) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				A2(_elm_lang$core$List$map, _user$project$Overdrive$toEnemyChip, momenta)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Overdrive$RemoveMomentum = function (a) {
	return {ctor: 'RemoveMomentum', _0: a};
};
var _user$project$Overdrive$toChip = function (momentum) {
	return A2(
		_debois$elm_mdl$Material_Chip$span,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '5px 5px'),
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Chip$deleteIcon('cancel'),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Chip$deleteClick(
						_user$project$Overdrive$RemoveMomentum(momentum)),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Chip$content,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_user$project$Overdrive$printMomentum(momentum)),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Overdrive$renderMomenta = function (momenta) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				A2(_elm_lang$core$List$map, _user$project$Overdrive$toChip, momenta)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Overdrive$AddEnemyMomentum = {ctor: 'AddEnemyMomentum'};
var _user$project$Overdrive$renderEnemyMomentum = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Overdrive$renderEnemyMomenta(model.enemyMomenta),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A6(_user$project$Overdrive$addMomentumInput, model, model.selectedEnemyMomentum, _user$project$Overdrive$SetEnemyMomentumStrength, _user$project$Overdrive$SetEnemyMomentumType, 'enemy', 100),
						_1: {
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Button$render,
								_user$project$Overdrive$Mdl,
								{
									ctor: '::',
									_0: 1,
									_1: {ctor: '[]'}
								},
								model.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$AddEnemyMomentum),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Add ',
											_user$project$Overdrive$printMomentum(model.selectedEnemyMomentum))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Button$render,
								_user$project$Overdrive$Mdl,
								{
									ctor: '::',
									_0: 0,
									_1: {ctor: '[]'}
								},
								model.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$ClearMomentum),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Clear Momentum'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Overdrive$AddMomentum = {ctor: 'AddMomentum'};
var _user$project$Overdrive$renderPlayerMomentum = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Overdrive$renderMomenta(model.momenta),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A6(_user$project$Overdrive$addMomentumInput, model, model.selectedMomentum, _user$project$Overdrive$SetMomentumStrength, _user$project$Overdrive$SetMomentumType, 'player', 0),
						_1: {
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Button$render,
								_user$project$Overdrive$Mdl,
								{
									ctor: '::',
									_0: 1,
									_1: {ctor: '[]'}
								},
								model.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$AddMomentum),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Add ',
											_user$project$Overdrive$printMomentum(model.selectedMomentum))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Button$render,
								_user$project$Overdrive$Mdl,
								{
									ctor: '::',
									_0: 0,
									_1: {ctor: '[]'}
								},
								model.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$ClearMomentum),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Clear Momentum'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Overdrive$view = function (model) {
	return A3(
		_debois$elm_mdl$Material_Scheme$topWithScheme,
		_debois$elm_mdl$Material_Color$Blue,
		_debois$elm_mdl$Material_Color$Indigo,
		A4(
			_debois$elm_mdl$Material_Layout$render,
			_user$project$Overdrive$Mdl,
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Layout$fixedHeader,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Layout$fixedDrawer,
					_1: {ctor: '[]'}
				}
			},
			{
				header: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h1,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '1rem'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('S33D OVERDRIVE'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				drawer: {ctor: '[]'},
				tabs: {
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: {ctor: '[]'}
				},
				main: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Grid$grid,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Grid$cell,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 3),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(_user$project$Overdrive$renderStatusList, model, _user$project$Overdrive$Player),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Grid$cell,
									{
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 2),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _user$project$Overdrive$renderPlayerMomentum(model),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Grid$cell,
										{
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 2),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _user$project$Overdrive$renderInitList(model),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Grid$cell,
											{
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 2),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _user$project$Overdrive$renderEnemyMomentum(model),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Grid$cell,
												{
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 3),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(_user$project$Overdrive$renderStatusList, model, _user$project$Overdrive$Enemy),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$Overdrive$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Overdrive$init, _1: _elm_lang$core$Platform_Cmd$none},
		view: _user$project$Overdrive$view,
		subscriptions: _user$project$Overdrive$subscriptions,
		update: _user$project$Overdrive$update
	})();
