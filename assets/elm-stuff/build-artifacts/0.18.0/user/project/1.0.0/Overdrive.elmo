var _user$project$Overdrive$printMomentum = function (m) {
	return (!_elm_lang$core$Native_Utils.eq(m.element, '')) ? ((!_elm_lang$core$Native_Utils.eq(m.strength, 0)) ? A2(
		_elm_lang$core$Basics_ops['++'],
		m.element,
		A2(
			_elm_lang$core$Basics_ops['++'],
			' +',
			_elm_lang$core$Basics$toString(m.strength))) : m.element) : '';
};
var _user$project$Overdrive$lobbySocket = 'ws://gaius.ddns.net:4000/socket/websocket';
var _user$project$Overdrive$roundDownToSecond = function (ms) {
	return _elm_lang$core$Basics$toFloat(
		A2(
			F2(
				function (x, y) {
					return x * y;
				}),
			1000,
			_elm_lang$core$Basics$truncate(ms / 1000)));
};
var _user$project$Overdrive$Momentum = F2(
	function (a, b) {
		return {element: a, strength: b};
	});
var _user$project$Overdrive$momentumDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	F2(
		function (element, strength) {
			return A4(_elm_lang$core$Debug$log, 'momentum decoded: ', _user$project$Overdrive$Momentum, element, strength);
		}),
	A2(_elm_lang$core$Json_Decode$field, 'element', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'strength', _elm_lang$core$Json_Decode$float));
var _user$project$Overdrive$momentaDecoder = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'momenta',
		_1: {ctor: '[]'}
	},
	_elm_lang$core$Json_Decode$list(_user$project$Overdrive$momentumDecoder));
var _user$project$Overdrive$Model = F5(
	function (a, b, c, d, e) {
		return {momenta: a, selectedMomentum: b, connectionStatus: c, currentTime: d, mdl: e};
	});
var _user$project$Overdrive$ScheduledReconnect = function (a) {
	return {ctor: 'ScheduledReconnect', _0: a};
};
var _user$project$Overdrive$Disconnected = {ctor: 'Disconnected'};
var _user$project$Overdrive$init = {
	momenta: {ctor: '[]'},
	selectedMomentum: A2(_user$project$Overdrive$Momentum, '', 0),
	connectionStatus: _user$project$Overdrive$Disconnected,
	currentTime: 0,
	mdl: _debois$elm_mdl$Material$model
};
var _user$project$Overdrive$Connected = {ctor: 'Connected'};
var _user$project$Overdrive$ConnectionStatusChanged = function (a) {
	return {ctor: 'ConnectionStatusChanged', _0: a};
};
var _user$project$Overdrive$SocketClosedAbnormally = function (a) {
	return {ctor: 'SocketClosedAbnormally', _0: a};
};
var _user$project$Overdrive$socket = A2(
	_saschatimme$elm_phoenix$Phoenix_Socket$reconnectTimer,
	function (backoffIteration) {
		return _elm_lang$core$Basics$toFloat((backoffIteration + 1) * 5000);
	},
	A2(
		_saschatimme$elm_phoenix$Phoenix_Socket$onAbnormalClose,
		_user$project$Overdrive$SocketClosedAbnormally,
		A2(
			_saschatimme$elm_phoenix$Phoenix_Socket$onClose,
			function (_p0) {
				return _user$project$Overdrive$ConnectionStatusChanged(_user$project$Overdrive$Disconnected);
			},
			A2(
				_saschatimme$elm_phoenix$Phoenix_Socket$onOpen,
				_user$project$Overdrive$ConnectionStatusChanged(_user$project$Overdrive$Connected),
				_saschatimme$elm_phoenix$Phoenix_Socket$init(_user$project$Overdrive$lobbySocket)))));
var _user$project$Overdrive$MomentumUpdate = function (a) {
	return {ctor: 'MomentumUpdate', _0: a};
};
var _user$project$Overdrive$lobby = function (userName) {
	return _saschatimme$elm_phoenix$Phoenix_Channel$withDebug(
		A3(
			_saschatimme$elm_phoenix$Phoenix_Channel$on,
			'momentum_update',
			function (msg) {
				return _user$project$Overdrive$MomentumUpdate(msg);
			},
			A2(
				_saschatimme$elm_phoenix$Phoenix_Channel$withPayload,
				_elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'user_name',
							_1: _elm_lang$core$Json_Encode$string('foobie')
						},
						_1: {ctor: '[]'}
					}),
				_saschatimme$elm_phoenix$Phoenix_Channel$init('room:lobby'))));
};
var _user$project$Overdrive$phoenixSubscription = function (model) {
	return A2(
		_saschatimme$elm_phoenix$Phoenix$connect,
		_user$project$Overdrive$socket,
		{
			ctor: '::',
			_0: _user$project$Overdrive$lobby('foobie'),
			_1: {ctor: '[]'}
		});
};
var _user$project$Overdrive$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Overdrive$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Overdrive$phoenixSubscription(model),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Overdrive$Tick),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Overdrive$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Overdrive$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'AddMomentum':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'element',
								_1: _elm_lang$core$Json_Encode$string(model.selectedMomentum.element)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'strength',
									_1: _elm_lang$core$Json_Encode$float(model.selectedMomentum.strength)
								},
								_1: {ctor: '[]'}
							}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'new_momentum'));
				return _elm_lang$core$Native_Utils.eq(model.selectedMomentum.element, '') ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedMomentum: A2(_user$project$Overdrive$Momentum, '', 0)
						}),
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'ClearMomentum':
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$null,
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'clear_momentum'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'SetMomentumType':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedMomentum: A2(_user$project$Overdrive$Momentum, _p1._0, model.selectedMomentum.strength)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetMomentumStrength':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedMomentum: A2(_user$project$Overdrive$Momentum, model.selectedMomentum.element, _p1._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RemoveMomentum':
				var _p2 = _p1._0;
				var push = A2(
					_saschatimme$elm_phoenix$Phoenix_Push$withPayload,
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'element',
								_1: _elm_lang$core$Json_Encode$string(_p2.element)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'strength',
									_1: _elm_lang$core$Json_Encode$float(_p2.strength)
								},
								_1: {ctor: '[]'}
							}
						}),
					A2(_saschatimme$elm_phoenix$Phoenix_Push$init, 'room:lobby', 'remove_momentum'));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(_saschatimme$elm_phoenix$Phoenix$push, _user$project$Overdrive$lobbySocket, push),
						_1: {ctor: '[]'}
					});
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Overdrive$Mdl, _p1._0, model);
			case 'MomentumUpdate':
				var _p3 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Overdrive$momentaDecoder, _p1._0);
				if (_p3.ctor === 'Ok') {
					var _p5 = _p3._0;
					var _p4 = A2(_elm_lang$core$Debug$log, 'ok', _p5);
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{momenta: _p5}),
						{ctor: '[]'});
				} else {
					var _p6 = A2(_elm_lang$core$Debug$log, 'err', _p3._0);
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'SocketClosedAbnormally':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							connectionStatus: _user$project$Overdrive$ScheduledReconnect(
								{
									time: _user$project$Overdrive$roundDownToSecond(model.currentTime + _p1._0.reconnectWait)
								})
						}),
					{ctor: '[]'});
			case 'ConnectionStatusChanged':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{connectionStatus: _p1._0}),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{currentTime: _p1._0}),
					{ctor: '[]'});
		}
	});
var _user$project$Overdrive$SetMomentumStrength = function (a) {
	return {ctor: 'SetMomentumStrength', _0: a};
};
var _user$project$Overdrive$SetMomentumType = function (a) {
	return {ctor: 'SetMomentumType', _0: a};
};
var _user$project$Overdrive$makeMomentumRadio = F3(
	function (model, instance, momentum) {
		return A5(
			_debois$elm_mdl$Material_Toggles$radio,
			_user$project$Overdrive$Mdl,
			{
				ctor: '::',
				_0: instance,
				_1: {ctor: '[]'}
			},
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Toggles$value(
					_elm_lang$core$Native_Utils.eq(momentum, model.selectedMomentum.element)),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Toggles$group('momentumtype'),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Toggles$ripple,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onToggle(
								_user$project$Overdrive$SetMomentumType(momentum)),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '3px 3px'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(momentum),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Overdrive$addMomentumInput = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A3(_user$project$Overdrive$makeMomentumRadio, model, 2, 'Fire'),
					_1: {
						ctor: '::',
						_0: A3(_user$project$Overdrive$makeMomentumRadio, model, 3, 'Water'),
						_1: {
							ctor: '::',
							_0: A3(_user$project$Overdrive$makeMomentumRadio, model, 4, 'Earth'),
							_1: {
								ctor: '::',
								_0: A3(_user$project$Overdrive$makeMomentumRadio, model, 5, 'Air'),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A3(_user$project$Overdrive$makeMomentumRadio, model, 6, 'Launch'),
						_1: {
							ctor: '::',
							_0: A3(_user$project$Overdrive$makeMomentumRadio, model, 7, 'Pin'),
							_1: {
								ctor: '::',
								_0: A3(_user$project$Overdrive$makeMomentumRadio, model, 8, 'Rush'),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A3(_user$project$Overdrive$makeMomentumRadio, model, 9, 'Recovery'),
							_1: {
								ctor: '::',
								_0: A3(_user$project$Overdrive$makeMomentumRadio, model, 10, 'Supreme'),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Slider$view(
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Slider$onChange(_user$project$Overdrive$SetMomentumStrength),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Slider$value(model.selectedMomentum.strength),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Slider$max(10),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Slider$min(0),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Slider$step(1),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Overdrive$ClearMomentum = {ctor: 'ClearMomentum'};
var _user$project$Overdrive$RemoveMomentum = function (a) {
	return {ctor: 'RemoveMomentum', _0: a};
};
var _user$project$Overdrive$toChip = function (momentum) {
	return A2(
		_debois$elm_mdl$Material_Chip$span,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '5px 5px'),
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Chip$deleteIcon('cancel'),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Chip$deleteClick(
						_user$project$Overdrive$RemoveMomentum(momentum)),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Chip$content,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_user$project$Overdrive$printMomentum(momentum)),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Overdrive$renderMomenta = function (momenta) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Current momenta: '),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					A2(_elm_lang$core$List$map, _user$project$Overdrive$toChip, momenta)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Overdrive$AddMomentum = {ctor: 'AddMomentum'};
var _user$project$Overdrive$view = function (model) {
	return _debois$elm_mdl$Material_Scheme$top(
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _user$project$Overdrive$renderMomenta(model.momenta),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _user$project$Overdrive$addMomentumInput(model),
							_1: {
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Button$render,
									_user$project$Overdrive$Mdl,
									{
										ctor: '::',
										_0: 1,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$AddMomentum),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'Add ',
												_user$project$Overdrive$printMomentum(model.selectedMomentum))),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Button$render,
									_user$project$Overdrive$Mdl,
									{
										ctor: '::',
										_0: 0,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Overdrive$ClearMomentum),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Clear Momentum'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}));
};
var _user$project$Overdrive$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Overdrive$init, _1: _elm_lang$core$Platform_Cmd$none},
		view: _user$project$Overdrive$view,
		subscriptions: _user$project$Overdrive$subscriptions,
		update: _user$project$Overdrive$update
	})();
